# http://qiita.com/delphinus/items/00ff2c0ba972c6e41542
# http://qiita.com/kawaz/items/ee725f6214f91337b42b
# http://qiita.com/delphinus/items/cd221a450fd23506e81a

[[plugins]]
repo = '~/.fzf'
hook_add = '''
  let $FZF_DEFAULT_OPTS .= ' --no-height'
'''

[[plugins]]
repo = 'RRethy/vim-illuminate'
hook_add = '''
  hi link illuminatedWord Visual
  map <leader>in :IlluminationToggle<cr>
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  " Enable per-command history.
  " CTRL-N and CTRL-P will be automatically bound to next-history and
  " previous-history instead of down and up. If you don't like the change,
  " explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
  let g:fzf_history_dir = '~/.local/share/fzf-history'

  let g:fzf_commits_log_options = '--graph --pretty=format:"%C(#ff5555)[%ci]%C(#88ff88)[%h] %Creset%s%C(#77ffff)\\ [%cn]" --decorate'

  " Augmenting Ag command using fzf#vim#with_preview function
  "   * fzf#vim#with_preview([[options], preview window, [toggle keys...]])
  "     * For syntax-highlighting, Ruby and any of the following tools are required:
  "       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
  "       - CodeRay: http://coderay.rubychan.de/
  "       - Rouge: https://github.com/jneen/rouge
  "
  "   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
  "   :Ag! - Start fzf in fullscreen and display the preview window above
  command! -bang -nargs=* Ag
    \ call fzf#vim#ag(<q-args>,
    \                 <bang>0 ? fzf#vim#with_preview('up:60%')
    \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
    \                 <bang>0)

  " Likewise, Files command with preview window
  command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>,
    \                 <bang>0 ? fzf#vim#with_preview('up:60%')
    \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
    \                 <bang>0)

  function! s:getUserInput(prompt)
    call inputsave()
    let userInput = input(a:prompt)
    call inputrestore()
    return shellescape(userInput)
  endfunction

  function! s:defaultRgOptions()
    return '--column --line-number --no-heading --color=always --smart-case'
  endfunction

  function! s:constructRgCommand()
    return 'rg ' . s:defaultRgOptions() . ' -- ' .  s:getUserInput('Enter search term: ')
  endfunction

  function! s:constructRgWithTypeCommand()
    return 'rg ' . s:defaultRgOptions() . ' --type ' . s:getUserInput('Enter file type: '). ' -- ' .  s:getUserInput('Enter search term: ')
  endfunction

  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   s:constructRgCommand(), 1,
    \   <bang>0 ? fzf#vim#with_preview('up:60%')
    \           : fzf#vim#with_preview('right:50%:hidden', '?'),
    \   <bang>0)

  command! -bang -nargs=* RgWithType
    \ call fzf#vim#grep(
    \   s:constructRgWithTypeCommand(), 1,
    \   <bang>0 ? fzf#vim#with_preview('up:60%')
    \           : fzf#vim#with_preview('right:50%:hidden', '?'),
    \   <bang>0)

  " Command for git grep
  " - fzf#vim#grep(command, with_column, [options], [fullscreen])
  command! -bang -nargs=* GGrep
    \ call fzf#vim#grep(
    \   'git grep --color --extended-regexp --line-number -- ' . s:getUserInput('Enter search term: '), 0,
    \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

  " Insert mode completion
  imap <c-t> <plug>(fzf-complete-file-ag)

  nmap <leader>f [fzf]
  nnoremap [fzf] <nop>

  nnoremap <silent> [fzf]f :<C-u>Files<cr><c-u>
  nnoremap <silent> [fzf]gg :<C-u>GGrep<cr><c-u>
  nnoremap <silent> [fzf]gf :<C-u>GFiles<cr><c-u>
  nnoremap <silent> [fzf]gs :<C-u>GFiles?<cr><c-u>
  nnoremap <silent> [fzf]gl :<C-u>Commits<cr><c-u>
  nnoremap <silent> [fzf]gL :<C-u>BCommits<cr><c-u>
  nnoremap <silent> [fzf]b :<C-u>Buffers<cr><c-u>
  nnoremap <silent> [fzf]r :<C-u>Rg<cr><c-u>
  nnoremap <silent> [fzf]R :<C-u>RgWithType<cr><c-u>
  nnoremap <silent> [fzf]l :<C-u>Lines<cr><c-u>
  nnoremap <silent> [fzf]L :<C-u>BLines<cr><c-u>
  nnoremap <silent> [fzf]t :<C-u>Tags<cr><c-u>
  nnoremap <silent> [fzf]T :<C-u>BTags<cr><c-u>
  nnoremap <silent> [fzf]m :<C-u>Marks<cr><c-u>
  nnoremap <silent> [fzf]w :<C-u>Windows<cr><c-u>
  nnoremap <silent> [fzf]h :<C-u>History<cr><c-u>
  nnoremap <silent> [fzf]ch :<C-u>History:<cr><c-u>
  nnoremap <silent> [fzf]sh :<C-u>History/<cr><c-u>
  "nnoremap <silent> [fzf]c :<C-u>Commands<cr><c-u>
  "nnoremap <silent> [fzf]M :<C-u>Maps<cr><c-u>
  nnoremap <silent> [fzf]h :<C-u>Helptags<cr><c-u>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'ozelentok/denite-gtags'
hook_add = '''
  nnoremap <C-g>a :DeniteCursorWord -buffer-name=gtags_context gtags_context<cr>
  nnoremap <C-g>d :DeniteCursorWord -buffer-name=gtags_def gtags_def<cr>
  nnoremap <C-g>r :DeniteCursorWord -buffer-name=gtags_ref gtags_ref<cr>
  nnoremap <C-g>g :DeniteCursorWord -buffer-name=gtags_grep gtags_grep<cr>
  nnoremap <C-g>t :Denite -buffer-name=gtags_completion gtags_completion<cr>
  nnoremap <C-g>f :Denite -buffer-name=gtags_file gtags_file<cr>
  nnoremap <C-g>p :Denite -buffer-name=gtags_path gtags_path<cr>
'''

[[plugins]]
repo = 'airblade/vim-rooter'

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
build = './install.sh nightly'
hook_add = '''
  " call coc#util#install()

  " always show signcolumns
  set signcolumn=yes

  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
  " Use tab for trigger completion with characters ahead and navigate.
  " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

  " Use K for show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

	" Better display for messages
	set cmdheight=2

  " Highlight symbol under cursor on CursorHold
	autocmd CursorHold * silent call CocActionAsync('highlight')

	augroup mygroup
		autocmd!
    " Setup formatexpr specified filetype(s).
		autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
		" Update signature help on jump placeholder
		autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
	augroup end

  nmap <leader>c [cocPrefix]
  nnoremap [cocPrefix] <nop>

  " Use `[c` and `]c` for navigate diagnostics
  nmap <silent> [cocPrefix]D <Plug>(coc-diagnostic-prev)
  nmap <silent> [cocPrefix]d <Plug>(coc-diagnostic-next)

  " Do default action for next item.
  nmap <silent> [cocPrefix]n :<C-u>CocNext<CR>
  " Do default action for previous item.
  nmap <silent> [cocPrefix]p :<C-u>CocPrev<CR>

  " Remap keys for gotos
  nmap <silent> [cocPrefix]gd <Plug>(coc-definition)
  nmap <silent> [cocPrefix]gy <Plug>(coc-type-definition)
  nmap <silent> [cocPrefix]gi <Plug>(coc-implementation)
  nmap <silent> [cocPrefix]gr <Plug>(coc-references)

  nmap <space> [cocListPrefix]
  nnoremap [cocListPrefix] <nop>

  " Using CocList
  " Show MRU
  nnoremap <silent> [cocListPrefix]m  :<C-u>CocList mru<cr>
  nnoremap <silent> [cocListPrefix]M  :<C-u>CocList --normal mru <c-r><c-w><cr>
  " Show buffer
  nnoremap <silent> [cocListPrefix]b  :<C-u>CocList buffers<cr>
  nnoremap <silent> [cocListPrefix]B  :<C-u>CocList --normal buffers <c-r><c-w><cr>
  " Show files
  nnoremap <silent> [cocListPrefix]f  :<C-u>CocList files<cr>
  nnoremap <silent> [cocListPrefix]F  :<C-u>CocList --normal files <c-r><c-w><cr>
  " Show grep result
  nnoremap <silent> [cocListPrefix]g  :<C-u>CocList -I grep -smartcase -regex<cr>
  nnoremap <silent> [cocListPrefix]G  :<C-u>CocList --normal grep -smartcase -regex <c-r><c-w><cr>
  " Show words result
  nnoremap <silent> [cocListPrefix]w  :<C-u>CocList -I words<cr>
  nnoremap <silent> [cocListPrefix]W  :<C-u>CocList --normal words <c-r><c-w><cr>
  " Show quickfix
  nnoremap <silent> [cocListPrefix]q  :<C-u>CocList quickfix<cr>
  " Show all diagnostics
  nnoremap <silent> [cocListPrefix]d  :<C-u>CocList diagnostics<cr>
  " Manage extensions
  nnoremap <silent> [cocListPrefix]e  :<C-u>CocList extensions<cr>
  " Show commands
  nnoremap <silent> [cocListPrefix]c  :<C-u>CocList commands<cr>
  " Find symbol of current document
  nnoremap <silent> [cocListPrefix]o  :<C-u>CocList outline<cr>
  " Search workspace symbols
  nnoremap <silent> [cocListPrefix]s  :<C-u>CocList -I symbols<cr>
  " Resume latest coc list
  nnoremap <silent> [cocListPrefix]r  :<C-u>CocListResume<CR>

  let g:coc_explorer_global_presets = {
  \   'floating': {
  \      'position': 'floating',
  \   },
  \   'floatingLeftside': {
  \      'position': 'floating',
  \      'floating-position': 'left-center',
  \      'floating-width': 50,
  \   },
  \   'floatingRightside': {
  \      'position': 'floating',
  \      'floating-position': 'left-center',
  \      'floating-width': 50,
  \   },
  \   'simplify': {
  \     'file.child.template': '[selection | clip | 1] [indent][icon | 1] [filename omitCenter 1]'
  \   }
  \ }

  " Use preset argument to open it
  nnoremap <silent> [cocPrefix]e :CocCommand explorer --preset floating<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
      \ 'colorscheme': 'PaperColor',
      \ 'active': {
      \   'left': [
      \     [ 'mode', 'paste' ],
      \     [ 'gitbranch' ],
      \     [ 'readonly', 'filename' ]
      \   ],
      \   'right': [
      \     [ 'lineinfo', 'percent' ],
      \     [ 'fileformat', 'fileencoding', 'filetype' ],
      \     [ 'cocstatus' ]
      \   ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status',
      \   'gitbranch': 'FugitiveHead',
      \   'readonly': 'LightlineReadonly',
      \   'modified': 'LightlineModified',
      \   'filename': 'LightlineFilename'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
    \ }
  function! LightlineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction

  function! LightlineReadonly()
    if &filetype == "help"
      return ""
    elseif &readonly
      return ""
    else
      return ""
    endif
  endfunction

  function! LightlineFilename()
    return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
          \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
          \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
  endfunction
'''

[[plugins]]
repo = 'edkolev/tmuxline.vim'

[[plugins]]
repo = 'vim-scripts/a.vim')
hook_add = '''
  let g:alternateSearchPath = 'reg:/include/src/g/,reg:/src/include/g/'
  let g:alternateNoDefaultAlternate = 1
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
  " Toggle Tag list plugin
  map <leader>tl :TlistToggle<cr>

  let Tlist_Auto_Open = 0
  let Tlist_Exit_OnlyWindow = 1
  let Tlist_Show_One_File = 1
  let Tlist_Display_Prototype = 1
  let Tlist_File_Fold_Auto_Close = 1
  let Tlist_WinWidth = 40
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  let g:tagbar_left = 1

  " Toggle Tag list plugin
  map <leader>tb :TagbarToggle<cr>
'''

[[plugins]]
repo = 'vim-scripts/vcscommand.vim'
hook_add = '''
  let g:VCSCommandMapPrefix = "<space>v"
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  map <leader>gl :Glog<cr>
  map <leader>gs :Gstatus<cr>
  map <leader>gb :Gblame<cr>
  map <leader>gr :Gread<cr>
  map <leader>gd :Gvdiff<cr>
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  " Trigger configuration. Do not use <tab> if you use
  " https://github.com/Valloric/YouCompleteMe.
  let g:UltiSnipsExpandTrigger = "<leader><tab>"
  let g:UltiSnipsJumpForwardTrigger = "<leader><tab>"
  let g:UltiSnipsJumpBackwardTrigger = "<leader><s-tab>"
  let g:UltiSnipsListSnippets = "<leader>sn"
  let g:UltiSnipsSnippetDirectories = ["snips-private", "UltiSnips"]

  " " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit = "vertical"
'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
  nmap <leader>ut :UndotreeToggle<cr>
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
  let g:matchup_matchparen_status_offscreen = 0
'''

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_leadingSpaceEnabled = 1

  function! YtToggleIndentLineAndLeadingSpace()
    execute 'IndentLinesToggle'
    execute 'LeadingSpaceToggle'
  endfunction
  map <leader>il :call YtToggleIndentLineAndLeadingSpace()<cr>

  let g:indentLine_bufNameExclude = ['NERD_tree.*']
'''

[[plugins]]
repo = 'vim-scripts/multisearch.vim'
hook_add = '''
  function! s:initMsearch()
    " Add your Msearch initialization commands here ...
    Msearch highlight add ctermbg=blue
    Msearch highlight add ctermbg=yellow
    Msearch highlight add ctermbg=green
    Msearch highlight add ctermbg=cyan
    Msearch highlight add ctermbg=magenta
    Msearch highlight add ctermbg=lightyellow
    Msearch highlight add ctermbg=lightred
    Msearch highlight add ctermbg=lightgreen
    Msearch highlight add ctermbg=lightcyan
    Msearch highlight add ctermbg=lightmagenta
    Msearch highlight add ctermbg=lightgray
    Msearch highlight add ctermbg=brown
    Msearch highlight add ctermbg=darkgreen
    Msearch highlight add ctermbg=darkmagenta
    Msearch highlight add ctermbg=darkred

    map <leader>m/ :Msearch add 
    map <leader>mn :Msearch next<cr>
    map <leader>mN :Msearch previous<cr>
    map <leader>ml :Msearch list<cr>
    map <leader>md :Msearch delete
  endfunction
  autocmd VimEnter * call s:initMsearch()
'''

[[plugins]]
repo = 'google/vim-searchindex'

[[plugins]]
repo = 'tpope/vim-vinegar'

[[plugins]]
repo = 'scrooloose/nerdtree'

hook_add = '''
  " Toggle NERDTree list plugin
  map <leader>ntt :NERDTreeToggle<cr>
  map <leader>ntf :NERDTreeFind<cr>
  "nmap - :NERDTreeFind<cr>

  let NERDTreeHijackNetrw=1

  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

[[plugins]]
repo = 'benmills/vimux'
hook_add = '''
  " Hack to fix issue running command when in copy-mode
  let g:VimuxResetSequence='-X cancel'

  " Prompt for a command to run
  map <Leader>vp :VimuxPromptCommand<CR>

  " Run last command executed by VimuxRunCommand
  map <Leader>vl :VimuxRunLastCommand<CR>

  " Inspect runner pane
  map <Leader>vi :VimuxInspectRunner<CR>

  " Open vim tmux runner
  map <Leader>vo :call VimuxOpenRunner()<CR>

  " Close vim tmux runner opened by VimuxRunCommand
  map <Leader>vq :VimuxCloseRunner<CR>

  " Interrupt any command running in the runner pane
  map <Leader>vx :VimuxInterruptRunner<CR>

  " Zoom the runner pane (use <bind-key> z to restore runner pane)
  map <Leader>vz :call VimuxZoomRunner()<CR>
'''

[[plugins]]
repo = 'motus/pig.vim'

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
  nmap  <leader>cw <Plug>(choosewin)
  let g:choosewin_overlay_enable = 1
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'

hook_add = '''
  let g:EasyMotion_use_upper = 1
  let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'

  nmap <leader>e [easymotion]
  nnoremap [easymotion] <nop>

  " <Leader>f{char} to move to {char}
  map  [easymotion]f <Plug>(easymotion-bd-f)
  nmap [easymotion]f <Plug>(easymotion-overwin-f)

  " s{char}{char} to move to {char}{char}
  nmap s <Plug>(easymotion-overwin-f2)

  " Move to line
  map [easymotion]l <Plug>(easymotion-bd-jk)
  nmap [easymotion]l <Plug>(easymotion-overwin-line)

  " Move to word
  map  [easymotion]w <Plug>(easymotion-bd-w)
  nmap [easymotion]w <Plug>(easymotion-overwin-w)
'''

[[plugins]]
repo = 'autowitch/hive.vim'

[[plugins]]
repo = 'thiagoalessio/rainbow_levels.vim'
hook_add = '''
  map <leader>r :RainbowLevelsToggle<cr>
'''

[[plugins]]
repo = 'tommcdo/vim-exchange'

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  au MyAutoCmd VimEnter * nested colorscheme hybrid
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'


[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
