[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'

[[plugins]]
repo = 'joereynolds/gtags-scope'
hook_add = '''
  let g:GtagsCscope_Auto_Load = 1

  let g:GtagsCscope_Auto_Map = 1

  "let g:GtagsCscope_Quiet = 1

  let g:GtagsCscope_Absolute_Path = 1
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'

hook_add = '''
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
'''

[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'

hook_add = '''
  " You can use other keymappings like <C-l> instead of <CR> if you want to
  " use these mappings as default search and somtimes want to move cursor with
  " EasyMotion.
  function! s:incsearch_fuzzy_config(...) abort
    return incsearch#util#deepextend(deepcopy({
    \   'converters': [incsearch#config#fuzzy#converter()],
    \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
    \   'keymap': {
    \     "\<c-e>": '<Over>(easymotion)'
    \   },
    \   'is_expr': 0
    \ }), get(a:, 1, {}))
  endfunction

  noremap <silent><expr> f/  incsearch#go(<SID>incsearch_fuzzy_config())
  noremap <silent><expr> f?  incsearch#go(<SID>incsearch_fuzzy_config({'command': '?'}))
  noremap <silent><expr> fg/ incsearch#go(<SID>incsearch_fuzzy_config({'is_stay': 1}))
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]] # カラースキーマ
repo = 'noahfrederick/vim-noctu'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  au MyAutoCmd VimEnter * nested colorscheme noctu
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  " Tab to cycle thru matches
  inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
  inoremap <expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

  let g:EclimCompletionMethod = 'omnifunc'
  let g:deoplete#omni#input_patterns = {}
  let g:deoplete#omni#input_patterns.java = '[^. *\t]\.\w*'
'''

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'

[[plugins]]
repo = 'skywind3000/gutentags_plus'
hook_add = '''
  " enable gtags module
  let g:gutentags_modules = ['ctags', 'gtags_cscope']

  " config project root markers
  let g:gutentags_project_root = ['.git', '.svn']

  " generate datebases in my cache directory, prevent gtags files polluting my project
  let g:gutentags_cache_dir = expand('~/.cache/gutentags')

  " forbid gutentags adding gtags databases
  let g:gutentags_auto_add_gtags_cscope = 0

  " Disable default key bindings
  let g:gutentags_plus_nomap = 1

  noremap <silent> <C-g>s :GscopeFind s <C-R><C-W><cr>
  noremap <silent> <C-g>g :GscopeFind g <C-R><C-W><cr>
  noremap <silent> <C-g>c :GscopeFind c <C-R><C-W><cr>
  noremap <silent> <C-g>t :GscopeFind t <C-R><C-W><cr>
  noremap <silent> <C-g>e :GscopeFind e <C-R><C-W><cr>
  noremap <silent> <C-g>f :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
  noremap <silent> <C-g>i :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
  noremap <silent> <C-g>d :GscopeFind d <C-R><C-W><cr>
  noremap <silent> <C-g>a :GscopeFind a <C-R><C-W><cr>
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap <space> [denite]
  nnoremap [denite] <nop>

  " Change default options
  " call denite#custom#option('default', 'auto_preview', v:true)
  call denite#custom#option('default', 'highlight_matched_char', 'Type')
  call denite#custom#option('default', 'highlight_preview_line', 'Type')
  call denite#custom#option('default', 'highlight_mode_insert', 'None')

  " Use the sublime sorter by default.
  call denite#custom#source('_', 'sorters', ['sorter_sublime'])
  call denite#custom#source('_', 'converters', ['converter_relative_word'])

  " Use ag for file_rec
	call denite#custom#var('file_rec', 'command',
	                     \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

  " Restrict to current project for file_mru
  ""call denite#custom#source('file_mru', 'matchers',
                          ""\ ['matcher_project_files', 'matcher_fuzzy'])
  call denite#custom#source('line', 'matchers', ['matcher_fuzzy'])

	" Ag command on grep source
	call denite#custom#var('grep', 'command', ['ag'])
	call denite#custom#var('grep', 'default_opts', ['-i', '-t']) " ignore case, all text files
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt', [])
	call denite#custom#var('grep', 'separator', ['--'])
	call denite#custom#var('grep', 'final_opts', [])

  nnoremap <silent> [denite]<space> :<C-u>Denite -resume<cr><c-u>
  nnoremap <silent> [denite]/ :<C-u>Denite grep<cr>
  nnoremap <silent> [denite]b :<C-u>Denite buffer<cr>
  nnoremap <silent> [denite]c :<C-u>Denite change<cr>
  nnoremap <silent> [denite]C :<C-u>Denite command_history<cr>
  nnoremap <silent> [denite]f :<C-u>Denite file_rec<cr><c-u>
  nnoremap <silent> [denite]h :<C-u>Denite help<cr><c-u>
  nnoremap <silent> [denite]j :<C-u>Denite jump<cr>
  nnoremap <silent> [denite]l :<C-u>Denite line<cr>
  nnoremap <silent> [denite]m :<C-u>Denite file_mru<cr><c-u>
  nnoremap <silent> [denite]o :<C-u>Denite outline<cr>
  nnoremap <silent> [denite]r :<C-u>Denite register<cr>
  nnoremap <silent> [denite]t :<C-u>Denite -buffer-name=gtags_completion gtags_completion<cr>
  nnoremap <silent> [denite]y :<C-u>Denite neoyank -default-action=append<cr>
'''

[[plugins]]
repo = 'LuXuryPro/deoplete-rtags'
hook_add = '''
  let g:deoplete#sources.cpp = ['buffer', 'rtags']
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_start_level=1
  let g:indent_guides_guide_size=1
  let g:indent_guides_enable_on_vim_startup=1
  let g:indent_guides_color_change_percent=3
  if !has('gui_running')
    let g:indent_guides_auto_colors=0
    function! s:indent_set_console_colors()
      hi IndentGuidesOdd ctermbg=235
      hi IndentGuidesEven ctermbg=236
    endfunction
    autocmd VimEnter,Colorscheme * call s:indent_set_console_colors()
  endif
'''

[[plugins]]
repo = 'google/vim-colorscheme-primary'
hook_add = '''
  set background=dark
  au MyAutoCmd VimEnter * nested colorscheme primary
'''

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'kmnk/vim-unite-svn'

[[plugins]]
repo = 'Shougo/vimshell.vim'

[[plugins]]
repo = 'jrosiek/vim-mark'
hook_add = '''
  let g:mwDefaultHighlightingPalette = 'maximum'
'''

[[plugins]]
repo = 'zhaocai/GoldenView.Vim'
hook_add = '''
  let g:goldenview__enable_at_startup = 0

  " 1. split to tiled windows
  nmap <silent> <C-L>  <Plug>GoldenViewSplit

  " 2. quickly switch current window with the main pane
  " and toggle back
  nmap <silent> <F8>   <Plug>GoldenViewSwitchMain
  nmap <silent> <S-F8> <Plug>GoldenViewSwitchToggle

  " 3. jump to next and previous window
  nmap <silent> <C-N>  <Plug>GoldenViewNext
  nmap <silent> <C-P>  <Plug>GoldenViewPrevious
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  map <leader>al :ALEToggle<cr>
'''

[[plugins]]
repo = 'justinmk/vim-sneak'
hook_add = '''
  let g:sneak#streak = 0
'''
